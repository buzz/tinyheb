#!/bin/sh
# postinst script for tinyheb
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

get_config()
{
    # Webserverauswahl wie im tinyheb.config definert
    # echo "DEBUG: setzen der Variablen fuer getconfig" >>/tmp/debug
    db_get tinyheb/webserver
    SELECTEDWebServerName="$RET"
    # echo "DEBUG: SELECTEDWebServerName=$SELECTEDWebServerName" >>/tmp/debug

    # Daten fuer den mysqlServer
    db_get tinyheb/mysql_server
    mysql_server="$RET"
    # echo "DEBUG: mysql_server=$mysql_server" >>/tmp/debug

    db_get tinyheb/mysql_port
    mysql_port="$RET"
    # echo "DEBUG: mysql_port=$mysql_port" >>/tmp/debug

    db_get tinyheb/mysql_root
    mysql_root="$RET"
    # echo "DEBUG: mysql_root=$mysql_root" >>/tmp/debug

    db_get tinyheb/mysql_password
    mysql_password="$RET"
    # echo "DEBUG: mysql_password=$mysql_password" >>/tmp/debug
}

# echo "DEBUG: Prog=$0 Arg1=$1 Arg2=$2" >> /tmp/debug

case "$1" in
    configure)
        # source debconf stuff
        . /usr/share/debconf/confmodule
        db_version 2.0

        # im Dialog gesetzte Werte abholen
        get_config

        case "$SELECTEDWebServerName" in
            Apache)     webservers="apache";;
            Apache-SSL) webservers="apache-ssl";;
            Apache2)    webservers="apache2";;
            All)        webservers="apache apache-ssl apache2" ;;
            *)          webservers="" ;;
        esac

        srcPath='/srv/www/cgi-bin/tinyheb'
        # echo "DEBUG $0 pwd=:`pwd`:" >>/tmp/debug

#        for server in $webservers
#        do
#            destDir="/etc/${server}/conf.d"
        destDir="/etc/apache2/conf-enabled"
        if [ -d "$destDir" ]
        then
            if [ ! -e ${destDir}/tinyheb.conf ]
            then 
                ln -s /etc/apache2/conf-available/tinyheb.conf ${destDir}/tinyheb.conf
            fi
        fi
#        done

        # enable cgi module
        a2enmod cgi


        # abfragen im dialog ob die Datenbank angelegt werden soll
        # im config-Dialog wurden die Variablen abgefragt
        if [ "${mysql_password}" != 'none'  ]
        then
            # echo "DEBUG: mysqlpasswort gesetzt -->  mysql_password=:$mysqlpassword:" >>/tmp/debug
            mysql_pwd="-p${mysql_password}"
	    # passwort ins konfigfile unter /etc/tinyheb/tinyheb.conf scrhreiben
        else
            # echo "DEBUG: mysqlPasswd leer --> mysql_password=:$mysqlpassword:" >>/tmp/debug
            mysql_pwd=""
        fi
        cfg="/etc/tinyheb/tinyheb.conf"
	if [ -f $cfg ]
	then
	    # ok cfg file gefunden
	    # Paraemeter eintragen
            # echo "DEBUG: originalfile kopieren" >>/tmp/debug
            cp -p $cfg ${cfg}.orig
	    # ATTN: die Rechte duerfen nicht verloren gehen
	    (
	    umask 077
	    cat $cfg |\
               sed "s/^\(MySQLServerRootPassword =\).*$/\1 ${mysql_password}/" | \
               sed "s/^\(MySQLServerName =\).*$/\1 $mysql_server/" | \
               sed "s/^\(MySQLServerPort =\).*$/\1 $mysql_port/" \
	       >/tmp/cfg.tmp && mv /tmp/cfg.tmp $cfg || true
	    ) || true
            # echo "DEBUG: Passwort ins konfigfile eintragen" >>/tmp/debug
	else
	    # file neu anlegen
            # echo "DEBUG: $0 kein Konfigfile da" >>/tmp/debug
	    # das duerfte eigentlich nie passieren weil es im Paket enth. ist
            echo "ATTN: das Unmoegliche ist eingetreten $cfg nicht da!"
        fi    
        mysqlcmd="mysql -h ${mysql_server} -P ${mysql_port} -u ${mysql_root} ${mysql_pwd}"
        # jetzt pruefen ob die Datenbank schon da ist:
        # echo "DEBUG: mysqlcmd=$mysqlcmd" >>/tmp/debug
        # in $2 steht die Vorversion wenns keine gibt ist das leer
        # in $1 sollte configure stehen
        # echo "DEBUG: $0 1=$1 2=$2" >>/tmp/debug
        if [ "x$2" != "x" ]
        then
            echo "Fuehre jetzt den update der Datenbank durch "
        else
		    echo "Erzeuge Datenbankstruktur..."
            # die Datenbank anlegen
            # echo "debug: Datenbank anlegen" >>/tmp/debug
            # echo "DEBUG: cmd=${mysqlcmd}" >>/tmp/debug
            ${mysqlcmd} < "$srcPath/DATA/init.sql" || true
        fi

        # echo "update-script aufrufen in :$srcPath/DATA:" >>/tmp/debug
        cd "${srcPath}/DATA"; ./update.pl --rpm || true
 
        # echo "DEBUG: nach dem Konfigzweig sql" >>/tmp/debug

        # webserver neu starten wenn gewuenscht
        for server in $webservers
        do
             if [ -x /usr/sbin/invoke-rc.d ]
             then
                 invoke-rc.d $server reload || true
             fi
        done
        # end of maintainers commands
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
       # do nothing 
       echo "PostInst: $0 $1"
    ;;

    *)
        echo "postinst called with unknown argument $1" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
